{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNR0hI2D1vJeCMJBuR1cIpB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Farhan-BA/lambton/blob/main/Python%20Lab%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Section 1: Numerical Data Types & Arithmetic Operators\n"
      ],
      "metadata": {
        "id": "e69UtAN6UL-r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " Question 1: The Road Trip Planner\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "oP-BIYOHUati"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fuel_efficiency = 11.5  # kilometers per liter\n"
      ],
      "metadata": {
        "id": "MYwF9qc6UimV"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "distance = 475  # kilometers"
      ],
      "metadata": {
        "id": "-i5DW3CdUq49"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fuel_price = 1.65  # dollars per liter"
      ],
      "metadata": {
        "id": "eQ-0iMR4UwMQ"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tank_capacity = 50 # liters"
      ],
      "metadata": {
        "id": "bBaWr2pAUzPI"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "These lines set up the basic values:\n",
        "\n",
        "Your car runs 11.5 km per liter of fuel.\n",
        "\n",
        "You plan to travel 475 km.\n",
        "\n",
        "Fuel costs $1.65 per liter.\n",
        "\n",
        "Your fuel tank can hold 50 liters."
      ],
      "metadata": {
        "id": "H5q1okXc2dGI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " A). Liters needed for the trip\n",
        "fuel_needed = distance / fuel_efficiency"
      ],
      "metadata": {
        "id": "ofG61q7oU2ij"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fuel_needed = distance / fuel_efficiency"
      ],
      "metadata": {
        "id": "DW604OhLViuv"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"A. Fuel needed:\", fuel_needed)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-uaV9DSvU-1d",
        "outputId": "1c566f09-f96f-43a5-cc30-306e13428f38"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A. Fuel needed: 41.30434782608695\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dividing total distance by fuel efficiency gives total liters required"
      ],
      "metadata": {
        "id": "-aTFe1F_VQN5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " A). Full tanks needed (whole number only)"
      ],
      "metadata": {
        "id": "tdMpTWUhVtQD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "full_tanks = distance // (fuel_efficiency * tank_capacity)"
      ],
      "metadata": {
        "id": "LhopXNKOV6k2"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"B. Full tanks (whole number):\", full_tanks)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uUlPq0d7WFYF",
        "outputId": "e72a161e-a726-4ef3-feb8-f9d218879075"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "B. Full tanks (whole number): 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We divide distance by range per tank and use floor division for full tanks only"
      ],
      "metadata": {
        "id": "oVxyXtuZWNKK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " C). Total fuel cost"
      ],
      "metadata": {
        "id": "jioE-CJ1WW-m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fuel_cost = fuel_needed * fuel_price"
      ],
      "metadata": {
        "id": "9_z6H_UEWdfE"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"C. Total fuel cost:\", fuel_cost)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d0piaQVlWod4",
        "outputId": "e613a02a-5782-4911-c7aa-5254475413dd"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "C. Total fuel cost: 68.15217391304347\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Multiply liters needed by price per liter"
      ],
      "metadata": {
        "id": "SAcA2tx6Wqs0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "D). Remaining fuel"
      ],
      "metadata": {
        "id": "IEAGPtkEWuLY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fuel_used_last_tank = fuel_needed % tank_capacity"
      ],
      "metadata": {
        "id": "A7ZDZS0pW0Ej"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "remaining_fuel = tank_capacity - fuel_used_last_tank"
      ],
      "metadata": {
        "id": "KD7kj7IeW4Dq"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"D. Remaining fuel in tank:\", remaining_fuel)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VRKvG4unW6N-",
        "outputId": "fd718bd4-ea61-4086-fb0b-bdbe326a9603"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "D. Remaining fuel in tank: 8.695652173913047\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modulus gives how much of the last tank was used, subtract from full tank"
      ],
      "metadata": {
        "id": "a5TpI54WXBtg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Section 2: Comparison & Logical Operators"
      ],
      "metadata": {
        "id": "KKZiPPMqXZMU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 2: Theme Park Entry Rules"
      ],
      "metadata": {
        "id": "FI1_NzK8Xh3y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scenario 1"
      ],
      "metadata": {
        "id": "ch2WbehyXr1D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "age = 30\n",
        "is_weekday = True\n",
        "is_family_day = False\n",
        "group_size = 3\n"
      ],
      "metadata": {
        "id": "_15Hum_tZPyw"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "discount_eligibility = (\n",
        "    (age <= 12 and is_weekday) or\n",
        "    (age >= 65) or\n",
        "    (is_family_day and group_size >= 4)\n",
        ")\n",
        "print(\"a. Discount eligibility:\", discount_eligibility)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QvycyNyPXye2",
        "outputId": "7cbd3900-b592-4d9a-87e6-15c2686ed0f2"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a. Discount eligibility: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Scenario 2"
      ],
      "metadata": {
        "id": "5GGBJcl5ZaCz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "age = 10\n",
        "is_weekday = True\n",
        "is_family_day = False\n",
        "group_size = 2\n"
      ],
      "metadata": {
        "id": "rjgAU3_Nb4ez"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Different person:\n",
        "\n",
        "10 years old (a child).\n",
        "\n",
        "Weekday."
      ],
      "metadata": {
        "id": "4Bpwa_6s29b4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "discount_eligibility_scenario2 = (\n",
        "    (10 <= 12 and True) or\n",
        "    (10 >= 65) or\n",
        "    (False and 2 >= 4)\n",
        ")\n",
        "print(\"b. New values discount:\", discount_eligibility_scenario2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WNsPcpEuX9WT",
        "outputId": "50ceafe9-f413-4c2d-ef67-0f9331135095"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b. New values discount: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This time:\n",
        "\n",
        "First condition is True ➜ Discount applies."
      ],
      "metadata": {
        "id": "93k7OAAT3I9n"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "c.)For the scenario in part (b), explain step-by-step how Python evaluates your boolean expression."
      ],
      "metadata": {
        "id": "iVRYsdSgc_Pn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "child_weekday = age <= 12 and is_weekday\n",
        "senior = age >= 65\n",
        "family_group = is_family_day and group_size >= 4"
      ],
      "metadata": {
        "id": "OozUDocIc12u"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gets_discount = child_weekday or senior or family_group"
      ],
      "metadata": {
        "id": "FTJuEYKcrqDX"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Child & Weekday Discount:\", child_weekday)\n",
        "print(\"Senior Discount:\", senior)\n",
        "print(\"Family Day Discount:\", family_group)\n",
        "print(\"Final Discount Eligibility:\", gets_discount)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MwBrKVs-rqgf",
        "outputId": "52ddf46b-5837-41a2-895a-915c517bda85"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Child & Weekday Discount: True\n",
            "Senior Discount: False\n",
            "Family Day Discount: False\n",
            "Final Discount Eligibility: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "child_weekday = True because age is 10 (≤12) and it's a weekday.\n",
        "\n",
        "senior = False because 10 is not ≥ 65.\n",
        "\n",
        "family_group = False because it’s not Family Day.\n",
        "\n",
        "Final result: True or False or False → True"
      ],
      "metadata": {
        "id": "P9yZNv-Brt3b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Section 3 String Data Types, Indexing & Slicing\n"
      ],
      "metadata": {
        "id": "cIg0xpLTr96o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "secret_message = \"PyThoN_Is_FuN_AnD_PoWeRfUl!\""
      ],
      "metadata": {
        "id": "yLhCCFMcsNRH"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "a. Character at index 5"
      ],
      "metadata": {
        "id": "jPrtXYqzskvW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "char_at_5 = secret_message[5]\n",
        "print(\"a. Character at index 5:\", char_at_5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vNs1HZ9Hs_xn",
        "outputId": "eb6f0b9c-66c9-4ba8-f45e-6bc600c0414e"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a. Character at index 5: N\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "b. Positive indexing to get \"Is_FuN\""
      ],
      "metadata": {
        "id": "yKnbllPctCfN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "substring_pos = secret_message[7:13]\n",
        "print(\"b. Positive slice:\", substring_pos)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BrVdOI3stMQt",
        "outputId": "6478a82a-d34f-47b5-abba-3d5693a3fee6"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b. Positive slice: Is_FuN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "c. Negative indexing to get \"PoWeRfUl\""
      ],
      "metadata": {
        "id": "9ip7vdbwtOwA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "substring_neg = secret_message[-9:-1]\n",
        "print(\"c. Negative slice:\", substring_neg)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oH7MBmVWtU5c",
        "outputId": "7d893d58-2891-46b9-c2a4-336a91d735d0"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "c. Negative slice: PoWeRfUl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "d. Every 4th character"
      ],
      "metadata": {
        "id": "1Ji_3xSxtXso"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "every_4th = secret_message[0::4]\n",
        "print(\"d. Every 4th character:\", every_4th)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "keGMlNwctbTm",
        "outputId": "d4e7f7b0-c6b7-4a68-c3b2-af159509ca66"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "d. Every 4th character: PosNDWU\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "e. Access index 50"
      ],
      "metadata": {
        "id": "sRIFbPTktmhl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    out_of_bounds = secret_message[50]\n",
        "except IndexError as e:\n",
        "    print(\"e. IndexError:\", e)"
      ],
      "metadata": {
        "id": "7V4v0uhLtp0H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a871717e-a273-4e4a-cd17-42bd3273c641"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "e. IndexError: string index out of range\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Index 50 is out of range for this string, hence IndexError"
      ],
      "metadata": {
        "id": "NP0lJ-f5tt24"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Section 4: Boolean Values & Expressions"
      ],
      "metadata": {
        "id": "p6opY1Kct0WT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 15\n",
        "y = 25\n",
        "z = 15\n",
        "text = \"adventure\""
      ],
      "metadata": {
        "id": "1v2wmKXCt6gI"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "a."
      ],
      "metadata": {
        "id": "QfKBv6YBt_6h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pred_a = True  # Prediction\n",
        "result_a = (x == z) and (y > x)\n",
        "print(\"a. Result:\", result_a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I8LSTEi3uGl3",
        "outputId": "faa8a75c-c0e2-4c4f-ede4-e378f3961c82"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a. Result: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "b."
      ],
      "metadata": {
        "id": "7MfhMLxcuHvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pred_b = False  # Prediction\n",
        "result_b = (x != z) or (y < x) or (len(text) < 5)\n",
        "print(\"b. Result:\", result_b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NmteHkAXuKy-",
        "outputId": "7d524f6a-f6f7-4335-ff67-d4af9c641c6c"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b. Result: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "c."
      ],
      "metadata": {
        "id": "1Cn1kzu0uMxv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pred_c = True  # Prediction\n",
        "result_c = not ((x > y) and (text == \"Adventure\"))\n",
        "print(\"c. Result:\", result_c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TGnRk-QEuVGL",
        "outputId": "3e39881b-634d-442a-f400-e5378a21143d"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "c. Result: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Section 5: String Properties & Basic Methods"
      ],
      "metadata": {
        "id": "M1mX3p3tuV26"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "a. String immutability"
      ],
      "metadata": {
        "id": "BqqzCO0XuZGu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "username = \"MyUser123\"\n",
        "try:\n",
        "    username[0] = 'm'\n",
        "except TypeError as e:\n",
        "    print(\"a. Error due to immutability:\", e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "apzfuFfyub7o",
        "outputId": "3e513e18-8d61-4b61-b33d-b0260efb51b1"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a. Error due to immutability: 'str' object does not support item assignment\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tries to change a character in a string.\n",
        "\n",
        "Fails, because strings are immutable in Python."
      ],
      "metadata": {
        "id": "S3HJPvyyufOH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "b. Quote formatting"
      ],
      "metadata": {
        "id": "wOpE404TukCO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "quote = \" practice makes perfect \"\n",
        "formatted_quote = quote.strip().upper().replace(\"PERFECT\", \"PROGRESS\")\n",
        "print(\"b. Formatted quote:\", formatted_quote)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1tzGichaunQp",
        "outputId": "ab791a59-a2c2-4220-ca60-3d24c3224cd6"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b. Formatted quote: PRACTICE MAKES PROGRESS\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Removes extra spaces, makes it uppercase, and replaces the word “PERFECT” with “PROGRESS”."
      ],
      "metadata": {
        "id": "Q70JrGoguq1y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "c. Length comparison"
      ],
      "metadata": {
        "id": "d2ohg_xmu5Ei"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "len_original = len(quote)"
      ],
      "metadata": {
        "id": "iQAPj7_FvEnw"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len_formatted = len(formatted_quote)"
      ],
      "metadata": {
        "id": "93hKLL3nu7l0"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"c. Original length:\", len_original)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ym1oMuXnvAA9",
        "outputId": "23946920-977f-4056-d61d-ab96d11e4672"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "c. Original length: 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"c. Formatted length:\", len_formatted)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JiIwhPbhvupR",
        "outputId": "795eab72-b9df-4a92-fb44-281026044e49"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "c. Formatted length: 23\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compares the length of the original vs. cleaned-up quote."
      ],
      "metadata": {
        "id": "wF3AllZmMEjn"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Vsz2ZKQ434Xm"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}